{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.v1 = void 0;\nvar stringify_1 = require(\"./stringify\");\nvar rng_1 = require(\"./rng\");\nvar _nodeId;\nvar _clockseq;\nvar _lastMSecs = 0;\nvar _lastNSecs = 0;\nvar v1 = function v1(options, buf) {\n  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var i = buf && offset || 0;\n  var b = buf || new Uint8Array(16);\n  var node = options && options.node ? options.node : _nodeId;\n  var clockseq = options && options.clockseq ? options.clockseq : _clockseq;\n  if (node == null || clockseq == null) {\n    var seedBytes = options && options.random ? options.random : options && options.rng ? options.rng() : rng_1.rng();\n    if (node == null) {\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n    if (clockseq == null) {\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  }\n  var msecs = options && options.msecs ? options.msecs : Date.now();\n  var nsecs = options && options.nsecs ? options.nsecs : _lastNSecs + 1;\n  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000;\n  if (dt < 0 && options && !options.clockseq) {\n    clockseq = clockseq + 1 & 0x3fff;\n  }\n  if ((dt < 0 || msecs > _lastMSecs) && options && !options.nsecs) {\n    nsecs = 0;\n  }\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n  msecs += 12219292800000;\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff;\n  var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff;\n  b[i++] = tmh >>> 24 & 0xf | 0x10;\n  b[i++] = tmh >>> 16 & 0xff;\n  b[i++] = clockseq >>> 8 | 0x80;\n  b[i++] = clockseq & 0xff;\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n  return buf || stringify_1.stringify(b);\n};\nexports.v1 = v1;","map":{"version":3,"mappings":"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","names":["_nodeId","_clockseq","_lastMSecs","_lastNSecs","v1","options","buf","offset","i","b","Uint8Array","node","clockseq","seedBytes","random","rng","rng_1","msecs","Date","now","nsecs","dt","Error","tl","tmh","n","stringify_1","exports"],"sources":["/Users/shravun/Desktop/Dev/visiontales-app/iSight-MobileApp-main-2/VisionTalesAdmin/node_modules/react-native-uuid/src/v1.ts"],"sourcesContent":["/* eslint-disable no-bitwise */\nimport {stringify} from './stringify';\nimport {rng} from './rng';\n\ntype V1Options = {\n  node: number[];\n  clockseq: number;\n  msecs: number;\n  nsecs: number;\n  random: number[];\n  rng: () => number[];\n};\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nlet _nodeId: number[];\nlet _clockseq: number;\n\n// Previous uuid creation time\nlet _lastMSecs = 0;\nlet _lastNSecs = 0;\n\n// See https://github.com/uuidjs/uuid for API details\nexport const v1 = (\n  options?: V1Options,\n  buf?: Uint8Array,\n  offset: number = 0,\n) => {\n  let i = (buf && offset) || 0;\n  const b = buf || new Uint8Array(16);\n\n  let node = options && options.node ? options.node : _nodeId;\n  let clockseq = options && options.clockseq ? options.clockseq : _clockseq;\n\n  // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n  if (node == null || clockseq == null) {\n    const seedBytes =\n      options && options.random\n        ? options.random\n        : options && options.rng\n        ? options.rng()\n        : rng();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [\n        seedBytes[0] | 0x01,\n        seedBytes[1],\n        seedBytes[2],\n        seedBytes[3],\n        seedBytes[4],\n        seedBytes[5],\n      ];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = ((seedBytes[6] << 8) | seedBytes[7]) & 0x3fff;\n    }\n  }\n\n  // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  let msecs: number = options && options.msecs ? options.msecs : Date.now();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  let nsecs: number = options && options.nsecs ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  const dt: number = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options && !options.clockseq) {\n    clockseq = (clockseq + 1) & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options && !options.nsecs) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = (tl >>> 24) & 0xff;\n  b[i++] = (tl >>> 16) & 0xff;\n  b[i++] = (tl >>> 8) & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  const tmh = ((msecs / 0x100000000) * 10000) & 0xfffffff;\n  b[i++] = (tmh >>> 8) & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = ((tmh >>> 24) & 0xf) | 0x10; // include version\n  b[i++] = (tmh >>> 16) & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = (clockseq >>> 8) | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  for (let n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || stringify(b);\n};\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}