{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from \"react\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport NavButton from \"./components/NavButton\";\nimport MainText from \"./components/MainText\";\nimport * as SQLite from \"expo-sqlite\";\nimport { useIsFocused } from \"@react-navigation/native\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar db = SQLite.openDatabase(\"VisionTalesDB.db\");\nvar HomeScreen = function HomeScreen(_ref) {\n  var navigation = _ref.navigation;\n  var isFocused = useIsFocused();\n  var _useState = useState(0),\n    _useState2 = _slicedToArray(_useState, 2),\n    demoInfoFilled = _useState2[0],\n    setDemoInfoFilled = _useState2[1];\n  var videoIdMap = new Map();\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    demoInfo = _useState4[0],\n    setDemoInfo = _useState4[1];\n  var videoData = {};\n  function getVideos() {\n    var response, json;\n    return _regeneratorRuntime.async(function getVideos$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch(\"https://2jwoowlka2.execute-api.us-east-1.amazonaws.com/videos\"));\n          case 3:\n            response = _context.sent;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n          case 6:\n            json = _context.sent;\n            videoData = json;\n            console.log(\"made call\");\n            _context.next = 11;\n            return _regeneratorRuntime.awrap(loadDatabase());\n          case 11:\n            console.log(\"database loaded\");\n            _context.next = 17;\n            break;\n          case 14:\n            _context.prev = 14;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 14]], Promise);\n  }\n  function loadDatabase() {\n    var _loop, i;\n    return _regeneratorRuntime.async(function loadDatabase$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            console.log(\"loading db\");\n            db.transaction(function (txn) {\n              txn.executeSql(\"SELECT name FROM sqlite_master WHERE type='table' AND name='table_video'\", [], function (tx, res) {\n                console.log(\"video item:\", res.rows.length);\n                if (res.rows.length >= 0) {\n                  txn.executeSql(\"DROP TABLE IF EXISTS table_video\", []);\n                  txn.executeSql(\"CREATE TABLE IF NOT EXISTS table_video(video_id INTEGER PRIMARY KEY AUTOINCREMENT, title VARCHAR(20), topic VARCHAR(20), url VARCHAR(255), yt_id VARCHAR(20))\", []);\n                }\n              }, function (tx, error) {\n                console.log(error);\n              });\n            });\n            _loop = function _loop(i) {\n              db.transaction(function (txn) {\n                txn.executeSql(\"INSERT INTO table_video (title, topic, url, yt_id) VALUES (?,?,?,?)\", [videoData.Items[i].title, videoData.Items[i].topic, videoData.Items[i].yt_url, videoData.Items[i].video_id], function (txn, results) {\n                  if (results.rowsAffected > 0) {\n                    console.log(results.insertId + \" Video uploaded!\");\n                    videoIdMap.set(videoData.Items[i].title, results.insertId);\n                  } else {\n                    alert(\"Upload Failed\");\n                  }\n                });\n              });\n            };\n            for (i = 0; i < videoData.Items.length; i++) {\n              _loop(i);\n            }\n            db.transaction(function (txn) {\n              txn.executeSql(\"SELECT name FROM sqlite_master WHERE type='table' AND name='table_demographics'\", [], function (tx, res) {\n                console.log(\"demographic item:\", res.rows.length);\n                if (res.rows.length == 0) {\n                  txn.executeSql(\"CREATE TABLE IF NOT EXISTS table_demographics(d_id INTEGER PRIMARY KEY, location VARCHAR(50), gender VARCHAR(20), age VARCHAR(255))\", [], function (txn, res) {\n                    console.log(res.rows);\n                  }, function (txn, error) {\n                    console.log(error);\n                  });\n                }\n              });\n            });\n            db.transaction(function (txn) {\n              txn.executeSql(\"SELECT d_id FROM table_demographics WHERE d_id=1\", [], function (tx, res) {\n                console.log(\"demographic item:\", res.rows.length);\n                if (res.rows.length == 0) {\n                  txn.executeSql(\"INSERT INTO table_demographics (d_id, location, gender, age) VALUES(1,'NA','NA','NA')\", [], function (txn, res) {\n                    console.log(res.rows);\n                  }, function (txn, error) {\n                    console.log(error);\n                  });\n                }\n              });\n            });\n            db.transaction(function (txn) {\n              txn.executeSql(\"SELECT name FROM sqlite_master WHERE type='table' AND name='table_quiz'\", [], function (txn, res) {\n                console.log(\"quiz item:\", res.rows.length);\n                if (res.rows.length >= 0) {\n                  console.log(\"going into quiz table drop\");\n                  txn.executeSql(\"DROP TABLE IF EXISTS table_quiz\", [], function (txn, res) {\n                    console.log(\"quiz table dropped\");\n                  }, function (txn, error) {\n                    console.log(error);\n                    console.log(\"quiz table drop error\");\n                  });\n                  txn.executeSql(\"CREATE TABLE IF NOT EXISTS table_quiz(quiz_id INTEGER PRIMARY KEY AUTOINCREMENT, title VARCHAR(20), video_id INTEGER NOT NULL, FOREIGN KEY (video_id) REFERENCES table_video (video_id))\", [], function (txn, response) {\n                    console.log(\"created table quiz!!\");\n                  }, function (txn, error) {\n                    console.log(error);\n                    console.log(\"error in creating quiz table!!\");\n                  });\n                }\n              });\n            });\n            db.transaction(function (txn) {\n              txn.executeSql(\"SELECT name FROM sqlite_master WHERE type='table' AND name='table_question'\", [], function (txn, res) {\n                console.log(\"question item:\", res.rows.length);\n                if (res.rows.length >= 0) {\n                  txn.executeSql(\"DROP TABLE IF EXISTS table_question\", []);\n                  txn.executeSql(\"CREATE TABLE IF NOT EXISTS table_question(question_id INTEGER PRIMARY KEY AUTOINCREMENT, content VARCHAR(255), quiz_id INTEGER NOT NULL, FOREIGN KEY (quiz_id) REFERENCES table_quiz(quiz_id) )\", []);\n                }\n              });\n            });\n            db.transaction(function (txn) {\n              txn.executeSql(\"SELECT name FROM sqlite_master WHERE type='table' AND name='table_question_choice'\", [], function (tx, res) {\n                console.log(\"question choice item:\", res.rows.length);\n                if (res.rows.length >= 0) {\n                  txn.executeSql(\"DROP TABLE IF EXISTS table_question_choice\", []);\n                  txn.executeSql(\"CREATE TABLE IF NOT EXISTS table_question_choice(choice_id INTEGER PRIMARY KEY AUTOINCREMENT, choice_content VARCHAR(255), isAnswer INTEGER, question_id INTEGER NOT NULL, FOREIGN KEY (question_id) REFERENCES table_question(question_id) )\", []);\n                }\n              });\n            });\n            db.transaction(function (txn) {\n              if (videoData.Items) {\n                var _loop2 = function _loop2(_i) {\n                  if (videoData.Items[_i].quiz) {\n                    txn.executeSql(\"INSERT INTO table_quiz (title, video_id) VALUES (?,?)\", [videoData.Items[_i].title + \" Quiz\", videoIdMap.get(videoData.Items[_i].title)], function (txn, resultsQuiz) {\n                      if (resultsQuiz.rowsAffected > 0) {\n                        console.log(resultsQuiz.insertId + \" Quiz downloaded!\");\n                        if (videoData.Items[_i].quiz.questions) {\n                          var _loop3 = function _loop3(j) {\n                            txn.executeSql(\"INSERT INTO table_question (content, quiz_id) VALUES (?, ?)\", [videoData.Items[_i].quiz.questions[j], resultsQuiz.insertId], function (txn, resultsQuestion) {\n                              if (resultsQuestion.rowsAffected > 0) {\n                                var _loop4 = function _loop4(k) {\n                                  txn.executeSql(\"INSERT INTO table_question_choice (choice_content, isAnswer, question_id) VALUES (?, ?, ?)\", [videoData.Items[_i].quiz.choices[j][k], videoData.Items[_i].quiz.correct[j][k], resultsQuestion.insertId], function (txn, resultsChoice) {\n                                    if (resultsChoice.rowsAffected > 0) {\n                                      console.log(videoData.Items[_i].quiz.choices[j][k] + \" downloaded successfully!\");\n                                    } else {\n                                      alert(\"Choice Download Failed\");\n                                    }\n                                  });\n                                };\n                                for (var k = 0; k < videoData.Items[_i].quiz.choices.length; k++) {\n                                  _loop4(k);\n                                }\n                              } else {\n                                alert(\"Question Download Failed\");\n                              }\n                            });\n                          };\n                          for (var j = 0; j < videoData.Items[_i].quiz.questions.length; j++) {\n                            _loop3(j);\n                          }\n                        }\n                      } else {\n                        alert(\"Upload Failed\");\n                      }\n                    });\n                  }\n                };\n                for (var _i = 0; _i < videoData.Items.length; _i++) {\n                  _loop2(_i);\n                }\n              }\n            });\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n  function startup() {\n    return _regeneratorRuntime.async(function startup$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            console.log(\"---------- BEGIN --------------\");\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(getVideos());\n          case 3:\n            console.log(\"demographic data\");\n            db.transaction(function (txn) {\n              txn.executeSql(\"SELECT * from table_demographics\", [], function (txn, result) {\n                console.log(result.rows);\n                console.log(\"demographic row count: \");\n                console.log(result.rows.length);\n                if (result.rows.length > 0) {\n                  setDemoInfoFilled(1);\n                } else {\n                  setDemoInfoFilled(0);\n                }\n              }, function (txn, error) {\n                console.log(error);\n                console.log(\"quiz error!!\");\n              });\n            });\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n  useEffect(function () {\n    startup();\n  }, [isFocused]);\n  return _jsx(SafeAreaView, {\n    style: {\n      flex: 1\n    },\n    children: _jsxs(ScrollView, {\n      style: {\n        flex: 1,\n        backgroundColor: \"#dbb42b\"\n      },\n      children: [_jsx(NavButton, {\n        title: \"Add Video\",\n        customClick: function customClick() {\n          return navigation.navigate(\"AddVideo\");\n        }\n      }), _jsx(NavButton, {\n        title: \"Vision Tales\",\n        customClick: function customClick() {\n          return navigation.navigate(\"ViewTopics\");\n        }\n      }), _jsx(NavButton, {\n        title: \"Add Quiz\",\n        customClick: function customClick() {\n          return navigation.navigate(\"AddQuiz\");\n        }\n      }), _jsx(NavButton, {\n        title: \"Test Your EyeQ\",\n        customClick: function customClick() {\n          return navigation.navigate(\"ViewQuizzes\");\n        }\n      }), _jsx(NavButton, {\n        title: \"Blog\",\n        customClick: function customClick() {\n          return Linking.openURL(\"https://www.cherisheyesight.org/news\");\n        }\n      }), _jsx(NavButton, {\n        title: \"Additional Resources\",\n        customClick: function customClick() {\n          return Linking.openURL(\"https://www.cherisheyesight.org/resources\");\n        }\n      }), _jsx(NavButton, {\n        title: \"Donate\",\n        customClick: function customClick() {\n          return navigation.navigate(\"Donate\");\n        }\n      }), _jsx(NavButton, {\n        title: \"Change Your Profile\",\n        customClick: function customClick() {\n          return navigation.navigate(\"DemographicQuiz\");\n        }\n      })]\n    })\n  });\n};\nexport default HomeScreen;","map":{"version":3,"names":["React","useEffect","useState","NavButton","MainText","SQLite","useIsFocused","db","openDatabase","HomeScreen","navigation","isFocused","demoInfoFilled","setDemoInfoFilled","videoIdMap","Map","demoInfo","setDemoInfo","videoData","getVideos","fetch","response","json","console","log","loadDatabase","transaction","txn","executeSql","tx","res","rows","length","error","i","Items","title","topic","yt_url","video_id","results","rowsAffected","insertId","set","alert","quiz","get","resultsQuiz","questions","j","resultsQuestion","k","choices","correct","resultsChoice","startup","result","flex","backgroundColor","navigate","Linking","openURL"],"sources":["/Users/shravun/Desktop/Dev/visiontales-app/iSight-MobileApp-main-2/VisionTalesAdmin/pages/HomeScreen.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { ScrollView, Text, SafeAreaView, Alert, Linking } from \"react-native\";\nimport NavButton from \"./components/NavButton\";\nimport MainText from \"./components/MainText\";\nimport * as SQLite from \"expo-sqlite\";\nimport { useIsFocused } from \"@react-navigation/native\";\n\nvar db = SQLite.openDatabase(\"VisionTalesDB.db\");\n\nconst HomeScreen = ({ navigation }) => {\n  const isFocused = useIsFocused();\n\n  // demoInfoFilled is to check if demographic info is filled up\n  const [demoInfoFilled, setDemoInfoFilled] = useState(0);\n\n  // Map of video title to Id's\n  const videoIdMap = new Map();\n\n  // Demographic Info\n  const [demoInfo, setDemoInfo] = useState([]);\n\n  // Object to contain JSON response from db server\n  let videoData = {};\n\n  // Pull video data from AWS\n  async function getVideos() {\n    try {\n      const response = await fetch(\n        \"https://2jwoowlka2.execute-api.us-east-1.amazonaws.com/videos\"\n      );\n      const json = await response.json();\n      videoData = json;\n      console.log(\"made call\");\n      await loadDatabase();\n      console.log(\"database loaded\");\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async function loadDatabase() {\n    console.log(\"loading db\");\n    db.transaction(function (txn) {\n      // Begin creating Video Table\n      txn.executeSql(\n        \"SELECT name FROM sqlite_master WHERE type='table' AND name='table_video'\",\n        [],\n        function (tx, res) {\n          console.log(\"video item:\", res.rows.length);\n          if (res.rows.length >= 0) {\n            txn.executeSql(\"DROP TABLE IF EXISTS table_video\", []);\n            txn.executeSql(\n              \"CREATE TABLE IF NOT EXISTS table_video(video_id INTEGER PRIMARY KEY AUTOINCREMENT, title VARCHAR(20), topic VARCHAR(20), url VARCHAR(255), yt_id VARCHAR(20))\",\n              []\n            );\n          }\n        },\n\tfunction (tx, error) {\n\t  console.log(error);\n\t}\n      );\n    });\n\n    // Insert videos pulled from server into local database\n    for (let i = 0; i < videoData.Items.length; i++) {\n      db.transaction(function (txn) {\n        // Insert into video table video data:\n        txn.executeSql(\n          \"INSERT INTO table_video (title, topic, url, yt_id) VALUES (?,?,?,?)\",\n          [\n            videoData.Items[i].title,\n            videoData.Items[i].topic,\n            videoData.Items[i].yt_url,\n            videoData.Items[i].video_id,\n          ],\n          (txn, results) => {\n            if (results.rowsAffected > 0) {\n              console.log(results.insertId + \" Video uploaded!\");\n              videoIdMap.set(videoData.Items[i].title, results.insertId);\n            } else {\n              alert(\"Upload Failed\");\n            }\n          }\n        );\n      });\n    }\n\n    // Create demographic storage\n    db.transaction(function (txn) {\n      // Begin creating Video Table\n      txn.executeSql(\n        \"SELECT name FROM sqlite_master WHERE type='table' AND name='table_demographics'\",\n        [],\n        function (tx, res) {\n          console.log(\"demographic item:\", res.rows.length);\n          if (res.rows.length == 0) {\n            txn.executeSql(\n              \"CREATE TABLE IF NOT EXISTS table_demographics(d_id INTEGER PRIMARY KEY, location VARCHAR(50), gender VARCHAR(20), age VARCHAR(255))\",\n              [],\n              (txn, res) => {\n                console.log(res.rows);\n              },\n              (txn, error) => {\n                console.log(error);\n              }\n            );\n          }\n        }\n      );\n    });\n\n    //Fill demographic data\n    db.transaction(function (txn) {\n      txn.executeSql(\n        \"SELECT d_id FROM table_demographics WHERE d_id=1\",\n        [],\n        function (tx, res) {\n          console.log(\"demographic item:\", res.rows.length);\n          if (res.rows.length == 0) {\n            txn.executeSql(\n              \"INSERT INTO table_demographics (d_id, location, gender, age) VALUES(1,'NA','NA','NA')\",\n              [],\n              (txn, res) => {\n                console.log(res.rows);\n              },\n              (txn, error) => {\n                console.log(error);\n              }\n            );\n          }\n        }\n      );\n    });\n\n    db.transaction(function (txn) {\n      // Begin creating Quiz Table\n      txn.executeSql(\n        \"SELECT name FROM sqlite_master WHERE type='table' AND name='table_quiz'\",\n        [],\n        function (txn, res) {\n          console.log(\"quiz item:\", res.rows.length);\n          if (res.rows.length >= 0) {\n            console.log(\"going into quiz table drop\");\n            txn.executeSql(\n              \"DROP TABLE IF EXISTS table_quiz\",\n              [],\n              (txn, res) => {\n                console.log(\"quiz table dropped\");\n              },\n              (txn, error) => {\n                console.log(error);\n                console.log(\"quiz table drop error\");\n              }\n            );\n            // txn.executeSql(\"PRAGMA foreign_keys = ON\");\n            txn.executeSql(\n              \"CREATE TABLE IF NOT EXISTS table_quiz(quiz_id INTEGER PRIMARY KEY AUTOINCREMENT, title VARCHAR(20), video_id INTEGER NOT NULL, FOREIGN KEY (video_id) REFERENCES table_video (video_id))\",\n              [],\n              (txn, response) => {\n                console.log(\"created table quiz!!\");\n              },\n              (txn, error) => {\n                console.log(error);\n                console.log(\"error in creating quiz table!!\");\n              }\n            );\n          }\n        }\n      );\n    });\n\n    db.transaction(function (txn) {\n      // Begin creating for Question Table\n      txn.executeSql(\n        \"SELECT name FROM sqlite_master WHERE type='table' AND name='table_question'\",\n        [],\n        function (txn, res) {\n          console.log(\"question item:\", res.rows.length);\n          if (res.rows.length >= 0) {\n            txn.executeSql(\"DROP TABLE IF EXISTS table_question\", []);\n            // , ,\n            txn.executeSql(\n              \"CREATE TABLE IF NOT EXISTS table_question(question_id INTEGER PRIMARY KEY AUTOINCREMENT, content VARCHAR(255), quiz_id INTEGER NOT NULL, FOREIGN KEY (quiz_id) REFERENCES table_quiz(quiz_id) )\",\n              []\n            );\n          }\n        }\n      );\n    });\n\n    db.transaction(function (txn) {\n      // Begin creating for Question Choice Table\n      txn.executeSql(\n        \"SELECT name FROM sqlite_master WHERE type='table' AND name='table_question_choice'\",\n        [],\n        function (tx, res) {\n          console.log(\"question choice item:\", res.rows.length);\n          if (res.rows.length >= 0) {\n            txn.executeSql(\"DROP TABLE IF EXISTS table_question_choice\", []);\n            // isAnswer: 0 means false/ 1 means true\n            txn.executeSql(\n              \"CREATE TABLE IF NOT EXISTS table_question_choice(choice_id INTEGER PRIMARY KEY AUTOINCREMENT, choice_content VARCHAR(255), isAnswer INTEGER, question_id INTEGER NOT NULL, FOREIGN KEY (question_id) REFERENCES table_question(question_id) )\",\n              []\n            );\n          }\n        }\n      );\n    });\n\n    db.transaction(function (txn) {\n      // Insert quizzes, choices, and answers into local DB from server DB\n      // Insert quizzes from server into local DB\n      if (videoData.Items) {\n        for (let i = 0; i < videoData.Items.length; i++) {\n          // If the quiz object isn't empty:\n          if (videoData.Items[i].quiz) {\n            txn.executeSql(\n              \"INSERT INTO table_quiz (title, video_id) VALUES (?,?)\",\n              [\n                videoData.Items[i].title + ` Quiz`,\n                videoIdMap.get(videoData.Items[i].title),\n              ],\n              (txn, resultsQuiz) => {\n                if (resultsQuiz.rowsAffected > 0) {\n                  console.log(resultsQuiz.insertId + \" Quiz downloaded!\");\n\n                  // If the questions object in quiz isn't empty\n                  if (videoData.Items[i].quiz.questions) {\n                    for (\n                      let j = 0;\n                      j < videoData.Items[i].quiz.questions.length;\n                      j++\n                    ) {\n                      txn.executeSql(\n                        \"INSERT INTO table_question (content, quiz_id) VALUES (?, ?)\",\n                        [\n                          videoData.Items[i].quiz.questions[j],\n                          resultsQuiz.insertId,\n                        ],\n                        (txn, resultsQuestion) => {\n                          // Now, upload choices for question, if question download is successful\n                          if (resultsQuestion.rowsAffected > 0) {\n                            for (\n                              let k = 0;\n                              k < videoData.Items[i].quiz.choices.length;\n                              k++\n                            ) {\n                              txn.executeSql(\n                                \"INSERT INTO table_question_choice (choice_content, isAnswer, question_id) VALUES (?, ?, ?)\",\n                                [\n                                  videoData.Items[i].quiz.choices[j][k],\n                                  videoData.Items[i].quiz.correct[j][k],\n                                  resultsQuestion.insertId,\n                                ],\n                                (txn, resultsChoice) => {\n                                  if (resultsChoice.rowsAffected > 0) {\n                                    console.log(\n                                      videoData.Items[i].quiz.choices[j][k] +\n                                        \" downloaded successfully!\"\n                                    );\n                                  } else {\n                                    alert(\"Choice Download Failed\");\n                                  }\n                                }\n                              );\n                            }\n                          } else {\n                            alert(\"Question Download Failed\");\n                          }\n                        }\n                      );\n                    }\n                  }\n                } else {\n                  alert(\"Upload Failed\");\n                }\n              }\n            );\n          }\n        }\n      }\n    });\n  }\n\n  async function startup() {\n    // const [demoInfoFilled, setDemoInfoFilled] = useState();\n    console.log(\"---------- BEGIN --------------\");\n    await getVideos();\n    console.log(\"demographic data\");\n\n    // Test for quiz input\n    db.transaction(function (txn) {\n      txn.executeSql(\n        \"SELECT * from table_demographics\",\n        [],\n        (txn, result) => {\n          console.log(result.rows);\n          console.log(\"demographic row count: \");\n          console.log(result.rows.length);\n          if (result.rows.length > 0) {\n            // if demographic info is filled up, the user would only able to change their profile\n            setDemoInfoFilled(1);\n          } else {\n            setDemoInfoFilled(0);\n          }\n        },\n        (txn, error) => {\n          console.log(error);\n          console.log(\"quiz error!!\");\n        }\n      );\n    });\n  }\n\n  // Code to run on startup\n  useEffect(() => {\n    // Put Your Code Here Which You Want To Refresh or Reload on Coming Back to This Screen.\n    startup();\n  }, [isFocused]);\n\n  return (\n    <SafeAreaView style={{ flex: 1 }}>\n      <ScrollView style={{ flex: 1, backgroundColor: \"#dbb42b\" }}>\n        <NavButton\n          title=\"Add Video\"\n          customClick={() => navigation.navigate(\"AddVideo\")}\n        />\n        <NavButton\n          title=\"Vision Tales\"\n          customClick={() => navigation.navigate(\"ViewTopics\")}\n        />\n        <NavButton\n          title=\"Add Quiz\"\n          customClick={() => navigation.navigate(\"AddQuiz\")}\n        />\n        <NavButton\n          title=\"Test Your EyeQ\"\n          customClick={() => navigation.navigate(\"ViewQuizzes\")}\n        />\n        <NavButton\n          title=\"Blog\"\n          customClick={() =>\n            Linking.openURL(\"https://www.cherisheyesight.org/news\")\n          }\n        />\n        <NavButton\n          title=\"Additional Resources\"\n          customClick={() =>\n            Linking.openURL(\"https://www.cherisheyesight.org/resources\")\n          }\n        />\n        <NavButton\n          title=\"Donate\"\n          customClick={() => navigation.navigate(\"Donate\")}\n        />\n        <NavButton\n          title=\"Change Your Profile\"\n          customClick={() => navigation.navigate(\"DemographicQuiz\")}\n        />\n      </ScrollView>\n    </SafeAreaView>\n  );\n};\nexport default HomeScreen;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}