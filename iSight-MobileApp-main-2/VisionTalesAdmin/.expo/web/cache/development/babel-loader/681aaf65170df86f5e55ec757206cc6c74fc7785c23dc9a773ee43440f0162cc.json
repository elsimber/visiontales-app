{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.v35 = void 0;\nvar stringify_1 = require(\"./stringify\");\nvar parse_1 = require(\"./parse\");\nvar utils_1 = require(\"./utils\");\nvar v35 = function v35(name, version, hashfunc) {\n  var generateUUID = function generateUUID(value, namespace, buf) {\n    var offset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    if (typeof value === 'string') {\n      value = utils_1.stringToBytes(value);\n    }\n    if (typeof namespace === 'string') {\n      namespace = parse_1.parse(namespace);\n    }\n    if (namespace && namespace.length !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    }\n    var bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = utils_1.stringToBytes(hashfunc(utils_1.bytesToString(bytes)));\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n    if (buf) {\n      for (var i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n    }\n    return buf ? buf : stringify_1.stringify(bytes);\n  };\n  return generateUUID;\n};\nexports.v35 = v35;","map":{"version":3,"mappings":";;;;;;AACA;AACA;AACA;AASO,IAAMA,GAAG,GAAG,SAANA,GAAG,CACdC,IAAY,EACZC,OAAe,EACfC,QAA+B,EACf;EAChB,IAAMC,YAAY,GAAG,SAAfA,YAAY,CAChBC,KAA0B,EAC1BC,SAA4B,EAC5BC,GAAc,EAEO;IAAA,IADrBC,6EAAiB,CAAC;IAElB,IAAI,OAAOH,KAAK,KAAK,QAAQ,EAAE;MAC7BA,KAAK,GAAGI,qBAAa,CAACJ,KAAK,CAAC;;IAG9B,IAAI,OAAOC,SAAS,KAAK,QAAQ,EAAE;MACjCA,SAAS,GAAGI,aAAK,CAACJ,SAAS,CAAC;;IAG9B,IAAIA,SAAS,IAAIA,SAAS,CAACK,MAAM,KAAK,EAAE,EAAE;MACxC,MAAMC,SAAS,CACb,kEAAkE,CACnE;;IAMH,IAAIC,KAAK,GAAG,IAAIC,UAAU,CAAC,EAAE,GAAGT,KAAK,CAACM,MAAM,CAAC;IAC7CE,KAAK,CAACE,GAAG,CAACT,SAAS,CAAC;IACpBO,KAAK,CAACE,GAAG,CAACV,KAAK,EAAEC,SAAS,CAACK,MAAM,CAAC;IAClCE,KAAK,GAAGJ,qBAAa,CAACN,QAAQ,CAACM,qBAAa,CAACI,KAAK,CAAC,CAAC,CAAC;IAErDA,KAAK,CAAC,CAAC,CAAC,GAAIA,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,GAAIX,OAAO;IACtCW,KAAK,CAAC,CAAC,CAAC,GAAIA,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,GAAI,IAAI;IAEnC,IAAIN,GAAG,EAAE;MACP,KAAK,IAAIS,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAE,EAAEA,CAAC,EAAE;QAC3BT,GAAG,CAACC,MAAM,GAAGQ,CAAC,CAAC,GAAGH,KAAK,CAACG,CAAC,CAAC;;;IAI9B,OAAOT,GAAG,GAAGA,GAAG,GAAGU,qBAAS,CAACJ,KAAK,CAAC;EACrC,CAAC;EAED,OAAOT,YAAY;AACrB,CAAC;AA9CYc,WAAG","names":["v35","name","version","hashfunc","generateUUID","value","namespace","buf","offset","utils_1","parse_1","length","TypeError","bytes","Uint8Array","set","i","stringify_1","exports"],"sources":["/Users/shravun/Desktop/Dev/visiontales-app/iSight-MobileApp-main-2/VisionTalesAdmin/node_modules/react-native-uuid/src/v35.ts"],"sourcesContent":["/* eslint-disable no-bitwise */\nimport {stringify} from './stringify';\nimport {parse} from './parse';\nimport {stringToBytes, bytesToString} from './utils';\n\nexport type GenerateUUID = (\n  value: string | Uint8Array,\n  namespace: string | number[],\n  buf?: number[],\n  offset?: number,\n) => string | number[];\n\nexport const v35 = (\n  name: string,\n  version: number,\n  hashfunc: (s: string) => string,\n): GenerateUUID => {\n  const generateUUID = (\n    value: string | Uint8Array,\n    namespace: string | number[],\n    buf?: number[],\n    offset: number = 0,\n  ): string | number[] => {\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n\n    if (typeof namespace === 'string') {\n      namespace = parse(namespace);\n    }\n\n    if (namespace && namespace.length !== 16) {\n      throw TypeError(\n        'Namespace must be array-like (16 iterable integer values, 0-255)',\n      );\n    }\n\n    // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g.\n    // `bytes = hashfunc([...namespace, ... value])`\n    let bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = stringToBytes(hashfunc(bytesToString(bytes)));\n\n    bytes[6] = (bytes[6] & 0x0f) | version;\n    bytes[8] = (bytes[8] & 0x3f) | 0x80;\n\n    if (buf) {\n      for (let i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n    }\n\n    return buf ? buf : stringify(bytes);\n  };\n\n  return generateUUID;\n};\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}